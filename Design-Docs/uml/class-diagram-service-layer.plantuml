@startuml

'skinparam monochrome reverse
' !theme amiga

title Service Layer Classes

class api.controllers.SplunkController {
    - SplunkService splunkService
    + ResponseEntity<String> postSplunkRawData(String)
    + ResponseEntity<RawData> postSplunkRawData(RawData)
    + ResponseEntity<DcLogins> postSplunkData(DcLogins)
    + ResponseEntity<List<DcLogins>> findRecordBySid(String)
}
class api.services.SplunkService {
    - SplunkRepository splunkRepository
    - DcLogins payload
    - SplunkDataRepository splunkDataRepository
    + DcLogins saveReport(DcLogins)
    + RawData saveData(RawData)
    + List<DcLogins> findBySid(String)
}

api.controllers.SplunkController "depends" ..>  api.services.SplunkService

class api.entities.DcLogins {
    - String sid
    - String search_name
    - String app
    - String owner
    - String results_link
    - LoginResult result
    + String toString()
}

class api.entities.LoginResult {
    - String LoginDate
    - String DataCenter
    - String Company
    - String LoginCount
    + String toString()
}
api.services.SplunkService "1" o-- "1..*" api.entities.DcLogins
api.entities.DcLogins "1" *-- "1..*" api.entities.LoginResult
api.services.SplunkService "uses" --> api.repos.SplunkRepository
api.services.SplunkService "uses" --> api.repos.SplunkDataRepository

interface api.repos.SplunkRepository {
    ~ DcLogins save(DcLogins)
    ~ List<DcLogins> findBySid(String)
}

interface api.repos.SplunkDataRepository {
    ~ RawData save(RawData)
}

cosmos.repository.CosmosRepository <|--  "implements"  api.repos.SplunkDataRepository
cosmos.repository.CosmosRepository <|--  "implements"  api.repos.SplunkRepository

class api.config.VisionOneDbConfiguration {
    - String uri
    - String key
    - String dbName
    - CosmosKeyCredential cosmosKeyCredential
    # String getDatabaseName()
    + CosmosDBConfig getConfig()
}
cosmos.config.AbstractCosmosConfiguration <|-- "extends" api.config.VisionOneDbConfiguration

@enduml